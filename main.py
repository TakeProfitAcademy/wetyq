
from os import stat
from aiogram import Bot, Dispatcher, executor
from aiogram import types
from contextlib import suppress
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from asyncio import sleep
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging



TOKEN = '5422086034:AAFINdqI4TZyR19sMcdxwNMNeU7v4qbrlNg'

# ? –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ stdout
logging.basicConfig(
    level=logging.INFO,
    format=u"%(asctime)s - %(levelname)s - %(name)s - %(message)s",
)

# ? –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)


bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# * –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–µ–π—Ç—ã –¥–ª—è FSM
class MainStates(StatesGroup):
    antichaos = State()
    crypto = State()


button_1 = types.KeyboardButton('–ö—É—Ä—Å—ã')
button_2 = types.KeyboardButton('–û –∫–æ–º–∞–Ω–¥–µ')
button_3 = types.KeyboardButton('–£—Å–ª—É–≥–∏')
button_4 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†')
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
greet_kb.add(button_1, button_2, button_3, button_4)


ku = types.ReplyKeyboardMarkup(resize_keyboard=True)
b_1 = types.KeyboardButton('Three whales')
b_2 = types.KeyboardButton('Supernal')
ku.add(b_1, b_2)


course_kbd = types.ReplyKeyboardMarkup(resize_keyboard=True)
bt1 = types.KeyboardButton('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞')
bt2 = types.KeyboardButton('–¢–∞—Ä–∏—Ñ—ã')
bt3 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†')
bt4 = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
course_kbd.add(bt1, bt2, bt3, bt4)


pk1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
bk1 = types.KeyboardButton('–¢–∞—Ä–∏—Ñ—ã')
bk2 = types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†')
bk3 = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
pk1.add(bk1, bk2, bk3)


op = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π üí≥')
item2 = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª—ë–∫(–∫—Ä–∏–ø—Ç–∞)üìà')
back = types.KeyboardButton('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
op.add(item1, item2, back)

# state="*" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –ª—é–±–æ–º —Å—Ç—ç–π—Ç–µ
@dp.message_handler(commands="start", state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    await state.finish() # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–π—Ç–∞
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Take Profit Academy!", reply_markup=greet_kb)


@dp.message_handler(text="–ö—É—Ä—Å—ã", state="*")
async def courses(message: types.Message):
    with open('st.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –∫—É—Ä—Å!", reply_markup=ku)


@dp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†", state="*")
async def support(message: types.Message):
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä!\n https://t.me/ManagerTPA", reply_markup=greet_kb)


@dp.message_handler(text='Three whales', state="*")
async def antishaos(message: types.Message, state: FSMContext):
    await MainStates.antichaos.set() # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–π—Ç. —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å state=MainStates.antichaos
    with open('ant.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ!", reply_markup=course_kbd)


@dp.message_handler(text='Supernal', state="*")
async def crypto_x(message: types.Message):
    await MainStates.crypto.set()
    with open('crp.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ!", reply_markup=course_kbd)


# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞ –∞–Ω—Ç–∏—Ö–∞–æ—Å
# state=MainStates.antichaos = —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Å—Ç–µ–π—Ç–µ
@dp.message_handler(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", state=MainStates.antichaos)
async def course_prog_antichaos(message: types.Message, state: FSMContext):
    with open('pk.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞!", reply_markup=course_kbd)



# –¢–∞—Ä–∏—Ñ—ã –∞–Ω—Ç–∏—Ö–∞–æ—Å
@dp.message_handler(text="–¢–∞—Ä–∏—Ñ—ã", state=MainStates.antichaos)
async def tarifs_antichaos(message: types.Message, state: FSMContext):
    with open('crpop.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!", reply_markup=op)
    

# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—Ä–∏–ø—Ç–æ—Ñ–∏–≥–Ω–∏
@dp.message_handler(text="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", state=MainStates.crypto)
async def course_prog_crypto(message: types.Message, state: FSMContext):
     with open('pkc.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞!", reply_markup=course_kbd)



# –¢–∞—Ä–∏—Ñ—ã –∫—Ä–∏–ø—Ç–æ—Ñ–∏–≥–Ω–∏
@dp.message_handler(text="–¢–∞—Ä–∏—Ñ—ã", state=MainStates.crypto)
async def tarifs_crypto(message: types.Message, state: FSMContext):
    with open('antop.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!", reply_markup=op)


@dp.message_handler(text='–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π üí≥', state="*")
async def payment_card(message: types.Message):
    await message.answer(
        "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã(Tinkoff): 5536 9141 2107 0563 \n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —á–∞—Ç https://t.me/ManagerTPA"
        "\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã!\n\n"
        "–° —É–≤–∞–∂–µ–Ω–∏–µ–º - TPA", reply_markup=greet_kb)


@dp.message_handler(text='–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ—à–µ–ª—ë–∫(–∫—Ä–∏–ø—Ç–∞)üìà', state="*")
async def payment_wallet(message: types.Message):
    with open('555.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("BTC (Bitcoin): 1Ltpb6whSuuCnY715SVGJr9bkNL8Z8ssCa\n\nUSDT (TRC20): TEzUbW6FJNQvT2DmxsM6sjysWDCbG6wjEp\n\nUSDT (ERC20): 0x0da931073e03e65ef7ee628e53b19df95e052cd8\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Txid —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ª–∏–±–æ —Ü–∏—Ñ—Ä—ã –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥ Binance) –º–µ–Ω–µ–¥–∂–µ—Ä—É:https://t.me/ManagerTPA\n\n–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞!\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º - TPA", reply_markup=greet_kb)



@dp.message_handler(text="–û –∫–æ–º–∞–Ω–¥–µ", state="*")
async def about_us(message: types.Message):
    with open('kkk.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!", reply_markup=greet_kb)



@dp.message_handler(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", state="*")
async def go_back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=greet_kb)



@dp.message_handler(text="–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã‚ùî", state="*")
async def faq(message: types.Message):
    with open('nn.png', 'rb') as file:
        await bot.send_photo(message.chat.id, file)
    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã!", reply_markup=greet_kb)


@dp.message_handler(text="–£—Å–ª—É–≥–∏", state="*")
async def services(message: types.Message):
    await message.answer("–í –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —É—Å–ª—É–≥–∏ –æ—Ç TPA: https://t.me/servstpa", reply_markup=greet_kb)


if __name__ == "__main__":

    # * –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    try:
        logger.warning("Starting bot")
        executor.start_polling(dp)
    except (KeyboardInterrupt, SystemExit):
        logger.error("Bot stopped!")
